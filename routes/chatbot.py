from flask import Blueprint, request, jsonify, session
from services.chatbot_data import get_biblical_response, get_app_help_response, get_greeting_response
from services.openai_client import get_openai_response
from services.chatbot_training import get_training_report, evaluate_chatbot_performance
from services.translation_service import translation_service
import logging

chatbot_bp = Blueprint('chatbot', __name__)

def login_required_api(f):
    def wrapper(*args, **kwargs):
        if 'user_id' not in session:
            return jsonify({'error': 'Authentification requise'}), 401
        return f(*args, **kwargs)
    wrapper.__name__ = f.__name__
    return wrapper

@chatbot_bp.route('/ask', methods=['POST'])
@login_required_api
def ask_kadosh():
    data = request.get_json()
    question = data.get('question', '').strip()
    
    if not question:
        return jsonify({'error': 'Question vide'}), 400
    
    # Log user interaction
    user_id = session.get('user_id')
    logging.info(f"User {user_id} asked: {question}")
    
    # Get user's language preference
    user_language = translation_service.get_current_language()
    
    # First, check for greetings (enhanced interactivity)
    greeting_response = get_greeting_response(question, user_language)
    if greeting_response:
        return jsonify({
            'response': greeting_response,
            'source': 'greeting',
            'interactive': True,
            'followup_questions': get_followup_questions(question),
            'services_offered': get_services_offered()
        })
    
    # Try to find biblical response (includes greetings now)
    biblical_response = get_biblical_response(question)
    if biblical_response:
        return jsonify({
            'response': biblical_response,
            'source': 'biblical_knowledge',
            'interactive': True,
            'related_topics': get_related_topics(question),
            'followup_questions': get_spiritual_followup_questions(question)
        })
    
    # Check for app help questions
    app_response = get_app_help_response(question)
    if app_response:
        return jsonify({
            'response': app_response,
            'source': 'app-help',
            'interactive': True,
            'help_categories': get_help_categories()
        })
    
    # If no pre-loaded response, use OpenAI with enhanced context
    try:
        enhanced_question = enhance_question_with_context(question)
        openai_response = get_openai_response(enhanced_question, user_language)
        return jsonify({
            'response': openai_response,
            'source': 'openai',
            'interactive': True,
            'suggested_topics': get_suggested_topics(question)
        })
    except Exception as e:
        logging.error(f"OpenAI error: {str(e)}")
        fallback_response = get_intelligent_fallback_response(question)
        return jsonify({
            'response': fallback_response,
            'source': 'fallback',
            'interactive': True,
            'suggested_actions': get_suggested_actions(),
            'error': str(e)
        }), 200

@chatbot_bp.route('/topics', methods=['GET'])
@login_required_api
def get_topics():
    from services.chatbot_data import BIBLICAL_TOPICS
    topics = list(BIBLICAL_TOPICS.keys())
    return jsonify({'topics': topics})

@chatbot_bp.route('/topic/<topic_name>', methods=['GET'])
@login_required_api
def get_topic_response(topic_name):
    from services.chatbot_data import BIBLICAL_TOPICS
    
    if topic_name in BIBLICAL_TOPICS:
        topic_data = BIBLICAL_TOPICS[topic_name]
        
        # Format the response properly
        formatted_response = f"## {topic_name.title()}\n\n"
        
        # Add verses
        formatted_response += "### Versets bibliques:\n"
        for verse in topic_data['versets']:
            formatted_response += f"**{verse['reference']}**: {verse['text']}\n\n"
        
        # Add interpretations
        formatted_response += "### Interpr√©tations:\n"
        for interpretation in topic_data['interpretations']:
            formatted_response += f"‚Ä¢ {interpretation}\n\n"
        
        return jsonify({
            'response': formatted_response,
            'topic': topic_name
        })
    else:
        return jsonify({'error': 'Sujet non trouv√©'}), 404

@chatbot_bp.route('/training-report', methods=['GET'])
@login_required_api
def get_chatbot_training_report():
    """Get comprehensive training performance report"""
    try:
        report = get_training_report()
        return jsonify({
            'report': report,
            'timestamp': '2025-07-17'
        })
    except Exception as e:
        logging.error(f"Erreur rapport: {str(e)}")
        return jsonify({'error': 'Erreur du serveur'}), 500

@chatbot_bp.route('/performance', methods=['GET'])
@login_required_api
def get_chatbot_performance():
    """Get current chatbot performance metrics"""
    try:
        performance = evaluate_chatbot_performance()
        return jsonify(performance)
    except Exception as e:
        logging.error(f"Erreur performance: {str(e)}")
        return jsonify({'error': 'Erreur du serveur'}), 500

# Helper functions for enhanced interactivity
def get_followup_questions(question):
    """Generate contextual follow-up questions"""
    question_lower = question.lower()
    
    if any(greeting in question_lower for greeting in ['bonjour', 'salut', 'hello']):
        return [
            "Avez-vous une question biblique particuli√®re ?",
            "Souhaitez-vous explorer un sujet spirituel ?",
            "Comment va votre marche avec Dieu ?"
        ]
    elif any(word in question_lower for word in ['comment', '√ßa va', 'allez-vous']):
        return [
            "Comment va votre relation avec Dieu ?",
            "Y a-t-il quelque chose pour lequel vous aimeriez que je prie ?",
            "Avez-vous des pr√©occupations spirituelles ?"
        ]
    else:
        return [
            "Avez-vous d'autres questions ?",
            "Souhaitez-vous approfondir ce sujet ?",
            "Puis-je vous aider avec autre chose ?"
        ]

def get_services_offered():
    """Get list of services offered by Kadosh.ia"""
    return [
        "üìñ Questions bibliques avec versets et interpr√©tations",
        "üåü Plus de 75 sujets spirituels √† explorer",
        "üí¨ Conseils pratiques pour la vie chr√©tienne",
        "üîß Support technique pour l'application BENJ INSIDE",
        "üôè Pri√®re et encouragement spirituel",
        "üìö Guidance biblique personnalis√©e"
    ]

def get_related_topics(current_topic):
    """Get related biblical topics"""
    from services.chatbot_data import BIBLICAL_TOPICS
    
    topic_relationships = {
        'foi': ['esp√©rance', 'confiance', 'pri√®re'],
        'amour': ['compassion', 'charit√©', 'mis√©ricorde'],
        'pri√®re': ['foi', 'intercession', 'je√ªne'],
        'paix': ['r√©conciliation', 'pardon', 'paix'],
        'esp√©rance': ['foi', 'pers√©v√©rance', 'patience'],
        'pardon': ['mis√©ricorde', 'r√©conciliation', 'repentance'],
        'gu√©rison': ['foi', 'miracles', 'pri√®re'],
        'mariage': ['famille', 'amour', 'unit√©'],
        'famille': ['mariage', '√©ducation', 'amour']
    }
    
    related = topic_relationships.get(current_topic, ['foi', 'amour', 'pri√®re'])[:3]
    return [topic for topic in related if topic in BIBLICAL_TOPICS]

def get_spiritual_followup_questions(question):
    """Generate spiritual follow-up questions"""
    return [
        "Souhaitez-vous approfondir ce sujet ?",
        "Avez-vous d'autres questions bibliques ?",
        "Comment puis-je vous accompagner dans votre foi ?",
        "Voulez-vous que je prie pour vous ?"
    ]

def get_help_categories():
    """Get help categories for app assistance"""
    return [
        "Connexion et inscription",
        "Profil et param√®tres",
        "T√©moignages",
        "Playlist audio",
        "Finances et cotisations",
        "Contact WhatsApp"
    ]

def get_suggested_topics(question):
    """Get suggested biblical topics based on question"""
    from services.chatbot_data import BIBLICAL_TOPICS
    
    question_lower = question.lower()
    
    if any(word in question_lower for word in ['dieu', 'seigneur', 'cr√©ateur']):
        return [topic for topic in ['foi', 'adoration', 'pri√®re'] if topic in BIBLICAL_TOPICS]
    elif any(word in question_lower for word in ['j√©sus', 'christ', 'sauveur']):
        return [topic for topic in ['salut', 'foi', 'amour'] if topic in BIBLICAL_TOPICS]
    elif any(word in question_lower for word in ['probl√®me', 'difficult√©', 'souffrance']):
        return [topic for topic in ['esp√©rance', 'patience', 'pri√®re'] if topic in BIBLICAL_TOPICS]
    elif any(word in question_lower for word in ['famille', 'mariage', 'couple']):
        return [topic for topic in ['mariage', 'famille', 'amour'] if topic in BIBLICAL_TOPICS]
    else:
        return [topic for topic in ['foi', 'amour', 'pri√®re'] if topic in BIBLICAL_TOPICS]

def get_suggested_actions():
    """Get suggested actions for fallback responses"""
    return [
        "Choisissez un sujet dans le menu d√©roulant",
        "Reformulez votre question",
        "Demandez-moi des versets sur un th√®me",
        "Explorez nos 75+ sujets bibliques"
    ]

def enhance_question_with_context(question):
    """Enhance question with biblical context for OpenAI"""
    context = """Tu es Kadosh.ia, assistant biblique chr√©tien de BENJ INSIDE. 
    R√©ponds selon la Bible et la foi chr√©tienne √©vang√©lique. 
    Utilise des versets bibliques quand c'est appropri√©. 
    Sois encourageant et spirituel dans tes r√©ponses."""
    
    return f"{context}\n\nQuestion: {question}"

def get_intelligent_fallback_response(question):
    """Generate intelligent fallback response with helpful suggestions"""
    return f"""üïäÔ∏è **Shalom bien-aim√©(e) !**

Je comprends votre question et j'aimerais vous aider du mieux possible. Bien que je ne trouve pas de r√©ponse sp√©cifique dans ma base de connaissances bibliques, permettez-moi de vous guider :

üí° **Suggestions pour mieux vous servir :**
‚Ä¢ Reformulez votre question avec des mots-cl√©s bibliques
‚Ä¢ Choisissez un sujet dans le menu d√©roulant (92+ sujets disponibles)
‚Ä¢ Demandez-moi des versets sur un th√®me particulier
‚Ä¢ Explorez nos sujets populaires : foi, amour, pri√®re, paix, esp√©rance

‚ú® **Exemples de questions que je peux traiter :**
‚Ä¢ "Que dit la Bible sur la confiance en soi ?"
‚Ä¢ "Comment surmonter la peur selon la Bible ?"
‚Ä¢ "Versets sur l'amour de Dieu"
‚Ä¢ "Comment avoir la paix int√©rieure ?"
‚Ä¢ "Pr√™che-moi sur la foi"

üíù **Je suis votre ami spirituel :**
En tant qu'enseignant biblique, coach chr√©tien et psychologue spirituel, je suis l√† pour vous accompagner avec empathie et compassion dans votre cheminement.

üôè *"Demandez, et l'on vous donnera; cherchez, et vous trouverez; frappez, et l'on vous ouvrira."* - Matthieu 7:7

*Que Dieu vous b√©nisse et vous guide dans votre recherche de Sa v√©rit√© !*"""
